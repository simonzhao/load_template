%%%----------------------------------------------------------------------------
%%% @author ${author}
%%% @copyright
%%% @doc
%%%
%%% @end
%%%----------------------------------------------------------------------------
-module( ${moduleName} ).

-behaviour( application ).

%% 应用程序回调
-export( [ start/2, stop/1 ] ).

%%%============================================================================
%%% 应用程序回调函数
%%%============================================================================

%%-----------------------------------------------------------------------------
%% @private
%% @doc
%% 用application:start/[1,2]启动一个应用程序时会调用这个函数。
%% 它应当启动该应用程序的各个进程.
%% 如果应用程序的结构遵循OTP的监控树设计原则，此函数就会启动该树的顶级监控进程
%%
%% @spec start( StartType, StartArgs ) -> { ok, Pid }
%%                                      | { ok, Pid, State }
%%                                      | { error, Reason }
%%            StartType = normal | { takeover, Node } | { failover, Node }
%%            StartArgs = term()
%% @end
%%-----------------------------------------------------------------------------
start( _StartType, _StartArgs ) ->
    case 'TopSupervisor':start_link() of 
        { ok, Pid } -> {ok, Pid };
        Error -> Error
    end.

%%-----------------------------------------------------------------------------
%% @private
%% @doc
%% 这个函数是在应用程序停止时调用的。
%% 它应当是Module:start/2 的逆操作, 并进行必要的清理.
%% 它的返回值会被忽略
%%
%% @spec stop( State ) -> void()
%% @end
%%-----------------------------------------------------------------------------
stop( _State ) ->
    ok.

%%%============================================================================
%%% 内部函数
%%%============================================================================

